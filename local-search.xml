<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vsomeip 快速入门</title>
    <link href="/2022/12/20/vsomeip-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <url>/2022/12/20/vsomeip-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="vsomeip-快速入门"><a href="#vsomeip-快速入门" class="headerlink" title="vsomeip 快速入门"></a>vsomeip 快速入门</h2><h4 id="1-下载仓库"><a href="#1-下载仓库" class="headerlink" title="1. 下载仓库"></a>1. 下载仓库</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/COVESA/</span>vsomeip.git<br></code></pre></td></tr></table></figure><h4 id="2-编译"><a href="#2-编译" class="headerlink" title="2. 编译"></a>2. 编译</h4><h5 id="2-1-安装相关依赖"><a href="#2-1-安装相关依赖" class="headerlink" title="2.1 安装相关依赖"></a>2.1 安装相关依赖</h5><p>我的ubuntu 版本是20.04，所以以ubuntu 20.04为例。</p><p>vsomeip依赖 Boost，所以我们要先安装 Boost(版本在1.55-1.74之间)，官方文档上对应的boost包版本过低。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo apt-<span class="hljs-built_in">get</span> install gcc g++ <span class="hljs-keyword">make</span><br>sudo apt install cmake<br>sudo apt-<span class="hljs-built_in">get</span> install libboost-<span class="hljs-built_in">system</span>-dev libboost-thread-dev libboost-<span class="hljs-built_in">log</span>-dev<br>sudo apt-<span class="hljs-built_in">get</span> install asciidoc <span class="hljs-keyword">source</span>-<span class="hljs-keyword">highlight</span> doxygen graphviz<br></code></pre></td></tr></table></figure><h5 id="2-2-编译vsomeip"><a href="#2-2-编译vsomeip" class="headerlink" title="2.2 编译vsomeip"></a>2.2 编译vsomeip</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">cd</span> vsomeip<br><span class="hljs-built_in">mkdir</span> build<br><span class="hljs-keyword">cd</span> build<br>cmake ..<br><span class="hljs-keyword">make</span><br>sudo <span class="hljs-keyword">make</span> install<br></code></pre></td></tr></table></figure><p>运行上述命令进行编译vsomeip库，其中运行make之后的编译很慢，大约需要四五分钟，耐心等待就好。</p><h5 id="2-3-编译hello-world-example"><a href="#2-3-编译hello-world-example" class="headerlink" title="2.3 编译hello_world example"></a>2.3 编译hello_world example</h5><p>clone 下载的vsomeip中自带一个demo hello_world，我们先编译对应的helloworld程序</p><p>Helloworld程序的编译方法也可以查看自带的readme vsomeip&#x2F;examples&#x2F;hello_world&#x2F;readme</p><p>回到build目录下，执行下列命令：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">make <span class="hljs-params">--build</span> . <span class="hljs-params">--target</span> hello_world<br><span class="hljs-keyword">cd</span> <span class="hljs-string">./examples/hello_world/</span><br>make<br>sudo make install <br>sudo ldconfig<br></code></pre></td></tr></table></figure><p>运行后编译就完成。</p><h4 id="3-运行"><a href="#3-运行" class="headerlink" title="3. 运行"></a>3. 运行</h4><p>编译完成之后，会在对应的编译目录下生成对应helloworld的二进制程序：hello_world_client和hello_world_service</p><p>此时不能安装readme里面写的执行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Running Hello World Example<br>---------------------------<br><br>The Hello World Example should be <span class="hljs-built_in">run</span> on the same host.<br>The<span class="hljs-built_in"> network </span>addresses within the configuration files need <span class="hljs-keyword">to</span> be adapted <span class="hljs-keyword">to</span> match<br>the devices addresses.<br><br><span class="hljs-keyword">To</span> start the hello world<span class="hljs-built_in"> client </span><span class="hljs-keyword">and</span><span class="hljs-built_in"> service </span><span class="hljs-keyword">from</span> their build-directory <span class="hljs-keyword">do</span>:<br><br>HOST1:<br><span class="hljs-attribute">VSOMEIP_CONFIGURATION</span>=../helloworld-local.json \<br><span class="hljs-attribute">VSOMEIP_APPLICATION_NAME</span>=hello_world_service \<br>./hello_world_service<br><br>HOST1:<br><span class="hljs-attribute">VSOMEIP_CONFIGURATION</span>=../helloworld-local.json \<br><span class="hljs-attribute">VSOMEIP_APPLICATION_NAME</span>=hello_world_client \<br>./hello_world_client<br></code></pre></td></tr></table></figure><p>我们在 …&#x2F; 目录下并不能找到 helloworld-local.json这个文件。</p><p>所以我们需要将 vsomeip&#x2F;examples&#x2F;hello_world&#x2F;helloworld-local.json 文件复制到二进制文件生成的目录下才能执行。</p><p>复制后，vsomeip&#x2F;buuld&#x2F;examples&#x2F;hello_world的目录结构为</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/09af136ba396ba4f6a66d9df4eac231a.png" alt="hello_world目录结构图"></p><p>下面运行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">HOST1运行service:<br>env <span class="hljs-attribute">VSOMEIP_CONFIGURATION</span>=./helloworld-local.json \<br><span class="hljs-attribute">VSOMEIP_APPLICATION_NAME</span>=hello_world_service \<br>./hello_world_service<br><br>HOST1运行client：<br>env <span class="hljs-attribute">VSOMEIP_CONFIGURATION</span>=./helloworld-local.json \<br><span class="hljs-attribute">VSOMEIP_APPLICATION_NAME</span>=hello_world_client \<br>./hello_world_client<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/ca74a1ab17f48773acf382349fec05bf.png" alt="service端运行结果"></p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/e05dcd7914bd016575fbdbf09053f1b9.png" alt="cilent端运行结果"></p><p>此时，一个简单的vsomeip cilent端和service端的通信就搭建完成了。</p>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蔚来实习</tag>
      
      <tag>vsomeip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo 博客新建文章</title>
    <link href="/2022/12/20/hexo-%E5%8D%9A%E5%AE%A2%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0/"/>
    <url>/2022/12/20/hexo-%E5%8D%9A%E5%AE%A2%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="hexo-博客新建文章"><a href="#hexo-博客新建文章" class="headerlink" title="hexo 博客新建文章"></a>hexo 博客新建文章</h2><h4 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss">hexo <span class="hljs-keyword">new</span> [layout] &lt;<span class="hljs-built_in">title</span>&gt;<br><span class="hljs-meta"># layout 默认为post</span><br></code></pre></td></tr></table></figure><h4 id="Front-matter-设置"><a href="#Front-matter-设置" class="headerlink" title="Front-matter 设置"></a>Front-matter 设置</h4><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/20200916181236318.png" alt="在这里插入图片描述"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">如何在hexo上创建一篇文章</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2020-09-16 19:33:46</span><br><span class="hljs-attr">categories:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">博客</span><br><span class="hljs-attr">tags:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">创建文章</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><h4 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mobisys22 CoDL 笔记</title>
    <link href="/2022/11/27/Mobisys22-CoDL-%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/11/27/Mobisys22-CoDL-%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Mobisys22-CoDL-笔记"><a href="#Mobisys22-CoDL-笔记" class="headerlink" title="Mobisys22-CoDL 笔记"></a>Mobisys22-CoDL 笔记</h1><p>论文标题：“CoDL: Efficient CPU-GPU Co-execution for Deep Learning Inference on Mobile Devices”</p><p>主讲人：Peter Wan 万 晔</p><p>主讲时间：2022-11-22 19：00</p><p>PPT地址：<a href="https://liumengyang.xyz/ReadingGroup/slides/CoDL.pdf">https://liumengyang.xyz/ReadingGroup/slides/CoDL.pdf</a></p><h2 id="ABSTRACT"><a href="#ABSTRACT" class="headerlink" title="ABSTRACT"></a>ABSTRACT</h2><p>​异构处理器上的并发推理执行对于提高日益繁重的深度学习 (DL) 模型的性能至关重要。但是目前的推理框架只能一次使用一个处理器。这主要是因为有两大挑战。</p><ol><li>需要减小数据开销</li><li>需要在处理器之间很好地划分每一个算子</li></ol><p>​本文提出了CoDL，一种用于移动设备上CPU与GPU并发的深度学习推理框架。它可以充分利用异构处理器对模型的每个算子进行加速。它集成了两种新技术</p><ol><li><em>hybrid-type-friendly data sharing</em>：允许每个处理器使用其有效的数据类型进行推理。为了减小开销，我们还提出了（hybrid-dimension partitioning）混合维度分区和（operator chain）算子链方法。</li><li><em>non-linearity- and concurrency-aware latency prediction</em>：通过为不同的处理器构建一个非常轻量而且准确的延迟预测器来指导合适的算子分区。</li></ol><p>​在不同的深度学习模型上对CoDL进行评估，最终获得4.93$\times$的速度提高，和62.3%的性能节约。</p><h2 id="1-INTRODUCTION"><a href="#1-INTRODUCTION" class="headerlink" title="1 INTRODUCTION"></a>1 INTRODUCTION</h2><p>背景：深度学习 (DL) 现在是各种移动应用程序的支柱。由于在隐私保护、互联网弹性和低云操作开销方面的优势，与云端（on-cloud）推理相比，设备推理(on-device)正在获得动力。然而，目前的设备端推理只能对一些简单模型实现可接受的响应能力，而对于其他模型则不行。例如，用于对象检测的 YOLO 需要超过 200 毫秒才能在主要的移动处理器（即移动 CPU 或 GPU）上运行。为了提高响应能力，一个自然的想法是在移动设备上同时利用异构处理器是否会有效。</p><p>​手机SOC的特定设计提供了这种可能，原因有两个</p><ol><li>相当的CPU与GPU性能。与PC端相差几个数量级不同，移动端的CPU与GPU在深度学习推理方面具有相似的性能，因此它们可以并排使用。</li><li>统一的内存。不同于服务器机器通常有单独的CPU和GPU内存，移动CPU和GPU使用统一的内存。它可以避免不同内存之间的数据复制。</li></ol><p>​但是，目前的推理框架只能用一次使用一个处理器，并且存在并发执行的两大挑战</p><ol><li><p><em>how to reduce data sharing overhead</em>：如何减少数据共享开销。尽管使用统一内存，但仍然需要相当大的开销来确保共享数据的一致性。例如，要在 CPU 和 GPU 上同时运行模型的算子，最后一个算子的输出需要在两个处理器之间共享。</p><p>如果不同的处理器使用不同的数据类型，这会导致处理器同步、数据映射以及潜在的数据转换。如果没有适当的策略，数据共享开销很容易超过并发带来的收益。</p></li><li><p><em>how to fairly partition each operator of a model between processors</em>：如何在处理器之间公平划分模型的每个算子。不同分区candidates的online measurements是不可行的。</p><p>需要一个轻量级和准确的延迟预测器，更重要的是，需要了解引入并发后带来的所有可能开销。</p></li></ol><p>​现在的研究工作还不能很好地解决上述挑战。μlayer和OPTIC可以让CPU和GPU在移动设备上并行使用。但是，对于挑战1，它们使用了相同的数据类型（即buffer type）来简化数据共享。这种设计是的CPU+GPU的协同执行甚至比GPU单独执行更慢，因为GPU使用了低效的数据类型。对于挑战2，为了进行算子分区，它们通过对计算量（FLOPs）进行线性回归来对算子的时延进行建模。尽管这个模型是轻量级的，但预测精度很差（&lt;10%）。原因是基于 FLOPs 的预测器无法捕获真实的延迟行为。还有一些延迟预测器，它们使用复杂的黑盒机器学习模型来捕获延迟行为并实现较高的准确度。然而，这些模型的运行开销很大。例如，nn-Meter对于一个卷积算子的模型大小超过800MB，太庞大而无法在移动设备上运行以进行实时预测。此外，这些预测器都没有考虑与并发相关的开销。</p><p>​为了解决这两种挑战，本文提出了CoDL。CoDL的设计源于两个关键发现。</p><ol><li>不同的处理器偏好不同的数据类型以获得最佳性能。例如，我们观察到对于卷积而言，与缓冲区类型（buffer type）相比，在 Adreno GPU 上使用图像类型（image type）可以实现 3.5 倍的加速。所以需要对每个处理器使用高效类型进行协同执行。</li><li>为了使延迟预测器既准确又轻量级，必须将平台特征（platform features）整合到模型中，而不是纯粹的黑盒学习。</li></ol><p>​基于这两个关键发现，CoDL提出了两种技术。</p><ol><li><p><em>Hybrid-type-friendly data sharing</em>：它允许异构处理器使用不同的数据类型进行推理。然后，为了减少数据共享开销，我们提出了混合维度分区（hybrid-dimension partitioning）和算子链（operator chain）方法。</p><p>混合维度分区可以为每个算子shape选择最佳的分区维度，以实现数据共享开销和处理器利用率之间的权衡。</p><p>算子链确保链上的算子只需要本地数据来执行，而不是来自其他处理器的共享数据，以避免数据共享开销。</p></li><li><p>*Non-linearity-and concurrency-aware latency prediction.*：CoDL可以通过构建轻量级但准确的延迟预测器来公平并online地划分算子。我们的见解是，其他学习延迟预测器的高复杂性是捕获由不同算法和执行块（different algorithms and execution blocks）引起的非线性延迟响应。因此，我们公式化来计算每个算法块以提取非线性。只有线性部分被一个极轻量的模型学习。此外，我们的预测器是第一个考虑所有与并发相关的开销的人。</p></li></ol><p>​对于给定的模型，可以根据预测器得出每个算子的最佳数据分区和共享计划（the best data partitioning and sharing plan）。 CoDL 然后协调处理器来执行计划。我们基于最先进的 (SOTA) 移动推理框架 MACE实现CoDL。在包括 Snapdragon 855、865 和 888 以及 Kirin 990 在内的商用现货 (COTS) 移动设备上的实验表明，与 SOTA 协同执行系统相比，CoDL 可以实现平均 3.43 倍的加速和 62.3% 的节能。通过考虑非线性特征，我们的预测器在预测 CPU 和 GPU 上算子的运行时延迟方面分别达到了 86.21% 和 82.69% 的准确率，并且推理开销低（每个算子 &lt; 1 ms）。此外，使用一次性收集的数据样本（运行时间小于 1.5 小时的 6000 个样本），预测器可以以设备上的方式进行训练（be trained in an on-device manner），延迟范围为 1 到 2 秒。</p><p>​主要的贡献如下：</p><ol><li>深入分析CPU+GPU并发执行的性能瓶颈</li><li>提出在 CPU 和 GPU 之间进行混合类型友好的数据共享，利用混合维度分区和算子链来减少共享开销</li><li>提出极轻量但准确的非线性和并发感知延迟预测</li><li>实施端到端 CoDL 框架并证明其性能优于最先进的解决方案</li></ol><h2 id="2-MOTIVATION-AND-ANALYSIS"><a href="#2-MOTIVATION-AND-ANALYSIS" class="headerlink" title="2.MOTIVATION AND ANALYSIS"></a>2.MOTIVATION AND ANALYSIS</h2><p>​在设计CoDL之前，我们首先通过分析SOTA（SOTA model)：state-of-the-art model，并不是特指某个具体的模型，而是指在该项研究任务中，目前最好&#x2F;最先进的模型。SOTA result：state-of-the-art result，指的是在该项研究任务中，目前最好的模型的结果&#x2F;性能&#x2F;表现。）推理系统来探索协同执行的性能瓶颈。</p><p>​我们按照μplayer（最佳协同处理模型）与MACE（最佳单处理器执行系统），分别进行了测试。在骁龙855平台上，CPU与GPU协同运算的μLayer要比但单CPU或GPU的MACE执行地慢。深入分析系统，当前并行系统的性能问题在于：</p><ol><li>不同的处理器使用了统一的数据类型</li><li>忽视了数据共享的开销</li><li>工作负载划分不合理</li></ol><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221116210803204.png" alt="image-20221116210803204"></p><p>​统一的数据类型对于异构处理器协同执行来说效率不高。为了简化数据共享，当前的协同执行系统为不同的处理器使用通用数据类型。例如，buffer type被CPU和GPU都支持，因此可以被μLayer调用。缓冲区类型将数据组织成连续的和指针可访问的块。但是，我们发现图像类型（image type）在 Adreno GPU 上比缓冲区更有效。图像类型将数据组织成多维块以方便渲染,它利用 GPU 上的快速 L1 Cache 缓存来加速数据访问</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221116210915345.png" alt="image-20221116210915345"></p><p>​图说明了使用图像和缓冲区类型进行具有不同输入形状的 3×3 卷积的性能差异。</p><p>​因此，要充分利用每个异构处理器，就应该使用相应的高效数据类型</p><p>​并行的数据共享开销不可忽略，尤其是对小算子而言。协同计算带来了数据共享开销，以确保数据的一致性。当前的协同系统忽视了这种开销。</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221116211339790.png" alt="image-20221116211339790"></p><p>​上图展示了算子在CPU和GPU协同执行过程中的延迟组件。假设算子输入由 GPU 上的最后一个算子生成，现在在 CPU 和 GPU 之间共享以共同执行。在算子的计算开销之外，额外的开销来自于：</p><ol><li>数据转换：如果使用了不同的数据类型</li><li>数据映射，将输入映射到CPU地址空间</li><li>同步，通知其他处理器完成映射（预同步）获计算（后同步）</li><li>数据取消映射，取消映射CPU地址空间的输出</li></ol><p>​这些开销都是不可忽略的。特别是对于小型算子，它很容易成为主要开销并抵消 CPU-GPU 协同执行带来的增益。图 4 演示了一个例子</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221116212011290.png" alt="image-20221116212011290"></p><p>​尽管协同执行将执行延迟从 1126μs 减少到 599μs，数据共享开销贡献了 1074μs，导致 1.5 倍的减速。</p><p>​因此，协同执行系统应该以减少开销为目标，只有当收益超过开销时才并发执行运算符。</p><p>​用于协同执行的平衡工作负载分区需要轻量级且准确的延迟预测器。当前的协同执行系统通常使用轻量级模型的预测延迟来指导处理器之间的工作负载分配。例如，μlayer使用基于 FLOPs 的线性模型来预测延迟。轻量级延迟模型适用于在线预测。然而，它太不准确了（&lt;10%）。由于工作负载不平衡，不准确的延迟预测反过来会导致推理性能不佳。上图中，鉴于最佳分区率为 90%，基于 FLOPs 的预测器通过在 GPU 上分配 60% 的运算符导致 4 倍的减速。</p><p>​预测不准确的原因是延迟与FLOPs不是简单的线性关系，而是受算法实现、数据块大小等平台特性（platform features）影响很大。如图 6 所示，随着 GPU 和 CPU 的 FLOPs 增加，延迟显示出非线性响应</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221116212820722.png" alt="image-20221116212820722"></p><p>​还有一些工作只在准确预测延迟，如nn-meter，它使用黑盒机器学习方法来学习基于多个算子超参数的延迟响应。然而，由于缺乏对底层平台特征的了解，黑盒方法以模型尺寸大为代价获得了令人满意的精度（例如，超过 800 MB 用于 nn-Meter 的卷积）和不可行的执行时间（例如，nn-Meter 在 PC 上超过 80 毫秒）。部署在移动设备上是不切实际的。因此，协同执行系统需要一个可以结合平台特性的延迟预测器，从而既轻便又准确。</p><h2 id="3-CODL-OVERVIEW"><a href="#3-CODL-OVERVIEW" class="headerlink" title="3 CODL OVERVIEW"></a>3 CODL OVERVIEW</h2><p>​为了在异构处理器上实现协同执行的最佳性能，我们提出了三个设计原则</p><ol><li>充分利用每个处理器的计算能力</li><li>最小化由数据共享引起的额外开销，即数据转换、映射和同步</li><li>最佳分区和平衡异构处理器之间的工作负载。</li></ol><p>​在这些原则的指导下，我们设计了 CoDL。它分两个阶段运行，即离线阶段和在线阶段，如图 7 所示。</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221116213426444.png" alt="image-20221116213426444"></p><p>​在离线阶段，CoDL 设计了一个轻量级但有效的延迟预测器来指导在线阶段的算子划分。预测器可以做到轻量和有效，原因在于：</p><ol><li>它考虑了所有数据共享开销，包括数据转换、映射和同步</li><li>它解析地制定了由平台特性引起的非线性延迟响应，并且只需要通过极轻量级的线性回归模型为每个实现的内核学习基本执行单元的延迟</li></ol><p>在线阶段由两个模块组成，the operator partitioner and the operator co-executor.。operator partitioner 的作用是为输入的 DL 模型制定最优的 operator 分区方案。基于latency predictor，它采用两种技术，即混合维度分区和运算符链，来完成这个功能。分区器首先通过混合维度分区技术为每个算子找到最佳分区维度（高度或输出通道）和比率（例如，0.1、0.2，…）作为base plan。根据base plan规划，通过算子链技术寻找算子上链，链上算子无需共享数据。来自分区器的最终分区计划是找到一组链的集合，每个都有链接的算子和链上的一些设置，即partitioning ratio and dimension。通过该计划，预先为 GPU 和 CPU 安排了模型权重，以避免每次推理调用的重新转换。</p><p>​operator co-executor根据分区计划协调operators的同步执行，针对不同的处理器使用其友好的数据类型。</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221116214804551.png" alt="image-20221116214804551"></p><p>​如图 8 所示，在链的开头，CoDL 首先在 CPU 和 GPU 之间共享数据。假设 GPU 友好类型为默认数据类型，CoDL 将分区输入特征图从 GPU 友好类型（例如，Adreno GPU 上的图像类型）转换为 CPU 友好类型。然后，CPU 和 GPU 同时执行一条链中的所有算子。在一条链的末端，GPU 将 CPU 上生成的数据转换回 GPU 友好类型，并与 GPU 输出结合在一起作为下一条链的输入。</p><h2 id="4-HYBRID-TYPE-FRIENDLY-DATA-SHARING"><a href="#4-HYBRID-TYPE-FRIENDLY-DATA-SHARING" class="headerlink" title="4 HYBRID-TYPE FRIENDLY DATA SHARING"></a>4 HYBRID-TYPE FRIENDLY DATA SHARING</h2><p>​CoDL 支持为每个处理器使用高效的数据类型，但是这也进一步增加的数据开销。本节介绍CoDL的两种数据共享优化技术，即混合维度划分和算子链。它们通过实现数据共享和计算开销之间的权衡来加速算子的共同执行</p><h4 id="4-1-Hybrid-dimension-partitioning"><a href="#4-1-Hybrid-dimension-partitioning" class="headerlink" title="4.1 Hybrid-dimension partitioning"></a>4.1 Hybrid-dimension partitioning</h4><ul><li><strong>Performance impact analysis</strong></li></ul><p>为了进行协同运算可以沿不同维度划分算子的张量，包括OC,H,W。同的维度导致不同的性能影响。</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221116215951730.png" alt="image-20221116215951730"></p><p>​首先，分区维度影响数据共享开销。确保处理器之间共享数据的一致性需要相当大的开销。因此，减少共享数据量很重要。模型权重在推理过程中是一致的。它们可以预先分配在每个处理器上，不需要动态共享。但是，每个算子的输入特征图需要动态共享，因为它是由最后一个算子在推理过程中生成的。</p><p>​因此，考虑到数据共享开销，在维度H上进行分区比在维度OC上进行分区更可取。对于OC分区，整个输入特征图在 CPU 和 GPU 之间共享。相比之下，只有部分特征图（以及用于过滤处理的填充数据）被共享用于H分区。</p><p>​其次，分区维度影响处理器利用率。尽管在H上进行分区具有较少的数据共享开销，但我们发现它并不总是意味着较少的运行时间。</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221116220640456.png" alt="image-20221116220640456"></p><p>​原因在于，与OC相比，H分区可能会降低处理器利用率，这具体取决于运算符形状</p><p>​为了利用处理器的内核间和内核内并行性，需要将算子的张量分成块并调度到不同的内核上运行。</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221116220930984.png" alt="image-20221116220930984"></p><p>​一个名为工作组（work group）的块被安排在 GPU 核心上运行。为了有效地利用内核中的许多 ALU，称为 warp 的基本执行单元同时为多个线程（例如 64 或 128）执行相同的指令。因此，工作组应该提供足够的线程来填充 warp。或者会有空闲的 ALU。</p><p>​<strong>H分区速度慢的原因</strong>：OC上的维度很小（为了避免许多过滤器对缓存造成的压力，当H和W比较小的时候（13 × 13），就没有足够的线程来填充warp），导致GPU利用率和性能降低</p><p>​第三，分区维度影响数据访问开销。为了更快的数据访问，分区维度应该与张量布局一致，并确保共享数据连续存储在内存中。按H分区是连续的，按W分区是不连续的。</p><ul><li><strong>Determining the partitioning dimension.</strong></li></ul><p>​应根据每个算子shape对数据共享开销和处理器利用率的影响来确定分区维度。因此，我们提出了 CoDL 的混合维度划分。它将影响因素整合到延迟预测器中。CoDL快速评估不同的分区计划，为每个算子找到最佳的分区维度和比率。选择最小的延迟最为最后的分区维度。</p><h4 id="4-2-Operator-chain"><a href="#4-2-Operator-chain" class="headerlink" title="4.2 Operator chain"></a>4.2 Operator chain</h4><p>​我们提出了运算符链技术来减少需要共享数据的运算符数量，而不是在每个运算符之后共享数据。数据只需要在链的开始和结束时共享，链中的其他算子使用本地生成的数据，但不使用来自其他处理器的数据。</p><ul><li><strong>Performance impact analysis</strong></li></ul><p>挑战：如何快速决定在 DL 模型中链接哪些算子。不正确的链接运算符会对性能产生负面影响。</p><p>首先，一个链的分区比例对于它的每个算子的性能来说可能并不理想。该比率是链中所有算子的折衷。其次，链越长，填充越多，因此有更多的额外计算。卷积需要在特征图的边界上填充以进行过滤处理。padding的公式如下</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221116222215715.png" alt="image-20221116222215715"></p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221116222251134.png" alt="image-20221116222251134"></p><p>​要在链中再添加一个算子，填充将沿着链传播到第一个算子。这给每个算子增加了越来越多的冗余计算。</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221119163805604.png" alt="image-20221119163805604"></p><p>​与无链（即在每个算子之后共享数据）相比，我们的链方法显着减少了数据共享开销。链长为9时，数据共享开销仅为无链的9%。然而，由于填充，计算延迟增加了 61%，导致与无链相比更多的延迟。此示例中的最佳长度应为 8，与无链相比，性能提高了 42%。</p><ul><li><strong>Chain searching algorithm</strong></li></ul><p>​为了找到在 DL 模型的数据共享和计算开销之间取得最佳权衡的链，我们设计了如算法 1 所示的链搜索算法</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221116223353017.png" alt="image-20221116223353017"></p><p>​对于这个 NP 问题，它是一个类似贪心的算法，它搜索到当前算子为止延迟最少的链。</p><p>​输入：输入是无链的最佳分区方案</p><p>​输出：输出是一组有最小总延迟的算子链（每个链都有分区维度dim,ratio,chained operators这些设置）</p><p>​算法思路<br>① 从一个不在任何链上的算子开始，对每一个可能的ρ，该算法不断链接更多的算子来计算与无链状况下的增益。<br>② 当再添加一个算子没有任何收益时停止<br>③ 此过程中，ρ 与 此链相关的最大链收益都会被记录下来，遍历完所有可能的ρ之后，最终记录到链的参数中。<br>④ 然后算法开始进行找下一个链</p><p>ρ的大小在第一个算子的ρ的附近。<br>要将下一个算子添加到链中，我们需要将链上的每个前面的算子调整为新的填充大小，并使用延迟预测器重新计算总延迟。鉴于该算法检查每个运算符的次数等于比率范围的大小，搜索空间为<img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221116224053725.png" alt="image-20221116224053725"></p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221116224125346.png" alt="image-20221116224125346"></p><h2 id="5-NON-LINEARITY-AND-CONCURRENCY-AWARE-LATENCY-PREDICTION"><a href="#5-NON-LINEARITY-AND-CONCURRENCY-AWARE-LATENCY-PREDICTION" class="headerlink" title="5 NON-LINEARITY- AND CONCURRENCY-AWARE LATENCY PREDICTION"></a>5 NON-LINEARITY- AND CONCURRENCY-AWARE LATENCY PREDICTION</h2><p>​CoDL 的分区和算子链技术依赖于算子协同执行的延迟预测。然而，挑战在于如何同时实现精确和轻量化。当前可用的延迟预测器中，由于两个原因不能很好地达到这个目的：</p><ol><li>这些预测器都没有考虑数据共享开销</li><li>由于缺乏底层平台的知识，预测器不能同时准确和轻量级</li></ol><p>​本节介绍我们的预测器设计。它可以通过以下方式实现精确和轻量化：</p><ol><li>包括共同执行的所有数据共享开销</li><li>公式化地制定由平台特征引起的非线性延迟响应，从而降低学习难度。</li></ol><p>输入：算子的超参数，分区维度，比例，是否为链的标记</p><p>输出：给定平台上运算符共同执行的预测延迟</p><h4 id="5-1-Latency-composition-of-concurrency"><a href="#5-1-Latency-composition-of-concurrency" class="headerlink" title="5.1 Latency composition of concurrency"></a>5.1 Latency composition of concurrency</h4><p>​算子共同执行的完整步骤包括：数据转换、映射、预同步、计算、后同步和取消映射。本小节讨论如何对与数据共享相关的延迟进行建模</p><p>​我们首先测量一系列特征图配置的延迟，以了解数据共享的延迟。转换、映射和取消映射步骤的测量时间是相应的 GPU 内核&#x2F;命令运行时间。预同步的测量时间是GPU映射完成和CPU确认完成的时间差。同理，post-sync的测量时间是CPU计算完成和GPU确认完成的时间差。</p><p>​我们的测量表明，映射、同步和数据转换会在 CPU 和 GPU 上的算子协同执行中产生明显的开销。在预测器中不能忽略它们。相比之下，unmapping 和 postsync 的开销很小（~50 μs），这在我们的预测器中被排除在外。</p><p>​因此，算子共同执行的总预测延迟</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221116230930275.png" alt="image-20221116230930275"></p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221116230943360.png" alt="image-20221116230943360"></p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221116231104135.png" alt="image-20221116231104135"></p><p>​𝑇𝑡𝑟𝑎𝑛𝑠 and 𝑇𝑚𝑎𝑝与数据大小有明确的线性关系，因为它们大多是内存操作，我们使用以数据大小为特征的线性回归来学习延迟。对于预同步开销 𝑇𝑝𝑠𝑦𝑛𝑐，根据我们的测量，它没有明显的特征。𝑇𝑝𝑠𝑦𝑛𝑐 主要取决于供应商的驱动程序实现。因此，我们使用测量的上限1ms 作为 𝑇𝑝𝑠𝑦𝑛𝑐。</p><h4 id="5-2-Non-linearity-extracted-computing-latency-prediction"><a href="#5-2-Non-linearity-extracted-computing-latency-prediction" class="headerlink" title="5.2 Non-linearity-extracted computing latency prediction"></a>5.2 Non-linearity-extracted computing latency prediction</h4><p>​当前精确延迟预测器的高复杂度是捕捉对算子超参数的非线性延迟响应。为了降低复杂性，我们首先分析非线性的原因并直接在预测器中对其公式化。非线性延迟响应主要有两个原因：</p><ol><li>首先，不同的算法对超参数的规模有不同的延迟响应。卷积算子根据超参数采用不同的算法，例如用于 3×3 的 Winograd 和用于 5×5 卷积的直接卷积。</li><li>其次，不同级别的数据块导致阶梯式延迟响应，GPU 内核执行有两个级别的块，即分别用于内核间和内核内并行的work group和 warp。如果张量大小不能完全除以块大小，就会有空闲的 ALU 或内核。例如，如果工作组的大小为 (2,5,10)，即 100 个线程，并且 warp 大小为 64，则工作组必须在两个 warp 中执行。因此，这块会导致阶梯式延迟响应。同样，对于 CPU，张量也必须被分成块并分配到每个 CPU 内核上运行。然后，为了利用SIMD（单指令多数据）单元，内核中也有一个基本的执行单元，例如TFLite框架中实现的8×8</li></ol><p><strong>Formulating non-linearity.</strong></p><p>​基于以上分析，我们将不同算法和块引起的非线性进行了公式化，并将内核延迟预测抽象为公式3。</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221116232202836.png" alt="image-20221116232202836"></p><p>𝑆𝑖𝑧𝑒𝑜𝑢𝑡𝑝𝑢𝑡：分区输出大小，通过预测器输入（算子超参数，dim，ρ）来计算给每个处理器用。</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221116232632014.png" alt="image-20221116232632014"></p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221116232716883.png" alt="image-20221116232716883"></p><p>​等式中唯一的需要学习的变量是<em>t𝑏𝑎𝑠𝑖𝑐𝑈𝑛𝑖𝑡</em>，在给定处理器上执行一个基本单元的时间。它依赖于运算符超参数、内核实现、硬件资源和调度，难以解析建模。因此，我们可以从真正的处理器分析中了解每个内核实现的特性。既然已经提取了非线性，一个极轻线性回归模型可以用来学习t𝑏𝑎𝑠𝑖𝑐𝑈𝑛𝑖𝑡并达到较高的精度。这个模型的Features是（𝐻 , 𝑊 , 𝐼𝐶, 𝑂𝐶）。因为它很轻量，所以它可以在手机设备上被训练通过梯度下降。根据算法的不同，一个算子可以在多个内核中进行运算。处理器的计算时间就是所有内核计算时间的总和。</p><h2 id="6-IMPLEMENTATION"><a href="#6-IMPLEMENTATION" class="headerlink" title="6 IMPLEMENTATION"></a>6 IMPLEMENTATION</h2><p>​我们基于MACE实现CoDL, MACE[19]是移动设备上广泛使用的DL推理框架，在我们的评估中也具有SOTA性能。我们将CoDL的核心功能，即混合类型友好型数据共享和轻量级延迟预测器集成到Mace中。我们通过预编译的共享库来交付这些功能。因此，CoDL也可以很容易地适应到其他推理框架中。CoDL支持DL模型中常用算子的协同执行，包括卷积、完全连接和池化。</p><p>​为了在CPU和GPU上实现混合类型友好的数据共享，我们构建了基于OpenCL api的共享库。具体来说，我们使用Buffer和Image2D分别创建缓冲区和图像类型数据。我们实现了一个OpenCL内核来在缓冲区和图像类型之间转换数据。一旦数据被转换，我们使用enqueueMapBuffer来映射数据，使用enqueueUnmapMemO- object来取消映射。</p><p>​为了实现轻量级延迟预测器，我们使用了多特征线性回归模型。为了训练预测器，我们收集了数据转换、映射和计算的样本。对于数据转换和映射，我们使用数据大小作为特征。对于计算，我们使用(𝐻,𝑊 , 𝐼𝐶, 𝑂𝐶)作为特征。</p><p>​总之，我们在第7节中总共从5个DL模型中收集了大约6000个样本。我们在采样期间将CPU和GPU频率固定为最大值。我们运行算子从H到OC，ρ从0.1到1。</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221116233836196.png" alt="image-20221116233836196">我们使用70%的样本作为训练集，剩下的用于测试。我们将学习率设置为0.1，并对预测器进行大约1000个周期的训练。</p><h2 id="7-EVALUATION"><a href="#7-EVALUATION" class="headerlink" title="7 EVALUATION"></a>7 EVALUATION</h2><h4 id="7-1-Experiment-setup"><a href="#7-1-Experiment-setup" class="headerlink" title="7.1 Experiment setup"></a>7.1 Experiment setup</h4><p><strong>Platforms</strong></p><p>Snapdragon 855, 865, 888 and Kirin 990.</p><p><strong>Models</strong></p><p>RetinaFace (RF), YOLOv2 (YOLO) , VGG-16 (VGG) , PoseNet (PN)  and Fast Style Transfer (FST) </p><p>它们由不同数量的算子组成，从14到61不等。我们在float32中执行这些模型。每个实验进行50次，得到平均结果。</p><p><strong>Baselines</strong></p><ul><li>𝜇Layer-like :通过FLOPS进行延迟预测，在CPU与FPU上进行并行运算，但是使用的都是buffer-type</li><li>MACE：单处理器机进行推理，但使用的是友好型的数据结构</li><li>计算并行执行系统的理论性能上限：排除数据共享开销，对每个算子总是采取最佳分区比例</li></ul><h4 id="7-2-Overall-performance"><a href="#7-2-Overall-performance" class="headerlink" title="7.2 Overall performance"></a>7.2 Overall performance</h4><p>除非另有说明，CoDL在Snapdragon平台上使用图像类型。结果如图15所示。</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221117220353949.png" alt="image-20221117220353949"></p><p>​提升原因：</p><ol><li>CoDL 在 CPU 和 GPU 上利用硬件友好的数据类型来充分利用处理器</li><li>CoDL 利用混合维度和算子链来减少数据共享开销</li><li>CoDL 使用准确的延迟预测器来平衡工作负载分区</li></ol><p>​更重要的是，CoDL接近理论性能上限，因为CoDL成功地减少了数据共享开销，并通过精确的延迟预测器应用了最佳的分区比例。</p><p>​在麒麟990处理器上，Mali GPU具有L1缓存，使其更有效地访问缓冲区类型的数据。因此，CoDL在麒麟平台的CPU和GPU上都使用了缓冲区类型</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221117220632515.png" alt="image-20221117220632515"></p><h4 id="7-3-Performance-of-the-hybrid-dimension-partitioning"><a href="#7-3-Performance-of-the-hybrid-dimension-partitioning" class="headerlink" title="7.3 Performance of the hybrid-dimension partitioning"></a>7.3 Performance of the hybrid-dimension partitioning</h4><p>​我们使用骁龙855作为平台。我们不应用运算符链。我们首先展示了由CoDL决定的划分维度在所选模型上的分布。</p><p>​<img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221117220823061.png" alt="image-20221117220823061"></p><p>​如图17所示，CoDL通过考虑冗余并发和计算开销来选择分区维度。77%的H分区和23%的OC分区。同时，H维度更有可能用于上面的层，而对于下面的层，更倾向于使用OC。这是因为常见的模型通常在上层具有较大的特征图，其中H分区更有效，以避免 CPU 和 GPU 之间的冗余数据共享。</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221117221119922.png" alt="image-20221117221119922"></p><p>​图18展示了在Snapdragon 855上使用和不使用所提出的混合维划分的推理延迟。</p><h4 id="7-4-Performance-of-the-operator-chain"><a href="#7-4-Performance-of-the-operator-chain" class="headerlink" title="7.4 Performance of the operator chain"></a>7.4 Performance of the operator chain</h4><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221117221250107.png" alt="image-20221117221250107"></p><p>​在选定的模型上，平均超过72%的操作符可以链接在一起，这大大降低了数据共享开销。</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221117221330378.png" alt="image-20221117221330378"></p><p>​图20说明了有和没有操作链的数据共享开销。由于减少了冗余数据转换和数据共享时间，对于所选模型，带有操作链的CoDL平均减少了55%的开销。</p><h4 id="7-5-Performance-of-the-latency-predictor"><a href="#7-5-Performance-of-the-latency-predictor" class="headerlink" title="7.5 Performance of the latency predictor"></a>7.5 Performance of the latency predictor</h4><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221117221539494.png" alt="image-20221117221539494"></p><p>​我们将基于flops的预测器作为基准，在SOTA推理系统中使用。基于flops的预测器考虑模型的flops个数，建立一个简单的线性模型来预测延迟。如图所示，基于flops的预测器在测试平台上的平均准确率仅为8.95%。考虑到非线性特性和并发开销，我们的延迟预测器在测试平台上的平均准确率分别为84.03%、85.17%和82.96%。准确的延迟预测导致CPU和GPU之间平衡的工作负载分区，这反过来加快了推断。</p><p>​更重要的是，所实现的精度甚至可以与黑盒延迟预测模型相媲美，例如nn-meter。在了解硬件特性的基础上，设计了针对移动soc的小而有效的预测器。我们的预测器的模型大小只有500字节左右，而nn-meter的大小接近800 MB，不适合在移动设备上进行在线预测</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221117221833026.png" alt="image-20221117221833026"></p><p>​此外，所提出的预测器是非常轻量级的。每次预测只需要0.2-0.5ms。对于预测器，我们收集了大约6000个样本。这种一次性工作在目标设备上花费大约1.5小时。根据我们的评估，训练过程大约需要1-2秒。</p><h4 id="7-6-System-overhead"><a href="#7-6-System-overhead" class="headerlink" title="7.6 System overhead"></a>7.6 System overhead</h4><p>接下来，我们从功率、能量消耗和内存使用方面评估CoDL的系统开销</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221117222350506.png" alt="image-20221117222350506"></p><p>​与MACE上的CPU和GPU相比，CoDL的平均功耗分别提高了28.9%和129.5%。</p><p>​CoDL利用了对CPU和GPU友好的数据类型，导致了更高的硬件利用率，功耗增加了22.2%，相比于使用统一数据类型的μplayer。</p><p>​图21b显示了CoDL每次推理的平均能耗以及所选模型的基线。</p><p>​与MACE上的CPU推断相比，我们降低了将近38.7%的能耗。CoDL还可以比μplayer平均节省62.3%的能源成本。但与MACE上的GPU相比，CoDL的能耗增加了52.0%。</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/image-20221117222746827.png" alt="image-20221117222746827"></p><p>​为了支持协同执行，CoDL分配额外的内存。如图所示，在所选模型上，CoDL比MACE多消耗大约25.97%的内存。例如，当执行VGG时，CoDL总共使用大约909.02 MB内存，而MACE大约占用645.55 MB内存。</p><h4 id="8-DISCUSSION"><a href="#8-DISCUSSION" class="headerlink" title="8 DISCUSSION"></a>8 DISCUSSION</h4><p><strong>Generality of CoDL</strong></p><p>​CoDL 是一种软件优化解决方案，旨在解决由于不了解平台特性和数据共享开销而导致的效率问题，从而实现设备上 CPU 和 GPU 的高效并发运行。</p><p>​虽然我们在MACE上实现了CoDL，但并发感知延迟预测和CPU和GPU之间的混合数据共享的思想可以很容易地应用到其他移动深度学习框架，如TensorFlow Lite和MNN。通过分析常用的运算符，CoDL可以自适应地为各种gpu选择处理器友好的数据类型。</p><p>​然而，如果新模型中有一些不受支持的算子，CoDL就需要大量的延迟分析和建模，这将花费更多的时间</p><p><strong>Limitation and future work</strong></p><p>​两大局限：</p><ol><li>首先，由于 CPU 和 GPU 的并发运行，CoDL 比单处理器解决方案消耗更多的功率。我们计划在DNN模型推理的基础上扩展预测器来对CPU和GPU的功耗行为进行建模，这样CoDL就可以在能量消耗和延迟之间取得平衡。</li><li>其次，CoDL 很难实现 MobileNet等轻量级 DL 模型的加速，因为分区导致的数据共享开销很容易支配小型算子 CPU 和 GPU 并发运行带来的增益。</li></ol><p>​在未来的工作中，为了适应更动态的工作负载，我们计划扩展预测器，根据CPU和GPU利用率来调整预测的延迟。这样，分区规划可以更灵活。但这并不是一个简单的问题，因为后台存在复杂的资源调度和竞争。</p><p>​对于利用早期终止的模型等实时工作负载，我们可以记录模型中每个终止点的终止概率。在多次执行模型后，每个点的终止概率收敛。然后，CoDL可以根据每个点的终止概率来制定分区计划，这样分区执行平均来说更有效。</p><p><strong>Extended discussion.</strong></p><p>​这项工作表明，移动SoC的具体设计，即CPU和GPU共享内存，是CPU和GPU并行运行能够加速DL模型推理的根本原因。但是，它涉及数据共享开销，包括数据转换和同步。为了解决这个问题，一个专用的基于硬件的数据转换器对于减少数据转换开销非常有帮助。此外，OpenCL的更好实现可以减少同步开销。</p><h4 id="9-RELATED-WORK"><a href="#9-RELATED-WORK" class="headerlink" title="9 RELATED WORK"></a>9 RELATED WORK</h4><p><strong>Co-execution of heterogeneous processors.</strong></p><p>​一些现有的工作探索了同时利用设备上的CPU和GPU来优化移动设备上的DL性能。</p><p>​OPTIC 调优CPU和GPU的工作负载分区和核心频率，使其保持在热约束范围内。</p><p>​μplayer 同时使用CPU和GPU，通过数据量化和工作负载分区来加速DL推理。但是与CoDL相比，它忽略了协同执行中真正的性能问题，如数据共享开销和由硬件特性引起的非线性响应延迟。通过考虑这些因素，CoDL成功地减少了数据共享开销，并最佳地平衡了工作负载分区</p><p>​ 此外，CoDL有助于减少每个DL模型推理的延迟，而这不能通过流水线并行来实现</p><p><strong>Performance prediction for DL inference.</strong></p><p>​已有的研究通过设计延迟预测模型来寻找高效的模型体系结构。cai 提出了一个以模型配置参数为特征的多项式回归模型，但该模型无法捕捉到底层平台特征的影响，而它在实践中可能占主导地位。nn-Meter在运行时考虑了多个算子的融合，使用黑盒随机森林模型预测时延。与现有工作不同的是，CoDL中的预测器考虑了处理器特性引起的延迟模式和并发特定的开销，使得预测器明显更加轻便和准确。</p><p><strong>Acceleration of DL inference on mobile devices.</strong></p><p>​许多工作都在努力更好地利用设备上的处理器来加速DL推理</p><h2 id="10-CONCLUSION"><a href="#10-CONCLUSION" class="headerlink" title="10 CONCLUSION"></a>10 CONCLUSION</h2><p>​在本文中，我们提出了一种用于高效DL推断的CPU-GPU协同执行框架CoDL。CoDL智能地平衡了数据共享和计算的开销，方法是从混合维度对操作符进行自适应划分，并将操作符链接起来以减少数据共享时间。此外，通过设计一个轻量级但精确的延迟预测器，CoDL公平地将工作负载分配到异构处理器上，该预测器考虑了联合执行的开销和非线性平台特性。我们在主流硬件平台上对CoDL进行了评估，结果表明，与SOTA协同执行系统相比，CoDL的平均速度提高了3.43×，节能62.3%。</p>]]></content>
    
    
    <categories>
      
      <category>论文笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MobiSys</tag>
      
      <tag>notes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络</title>
    <link href="/2022/11/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <url>/2022/11/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="计算机网络第一章-概述"><a href="#计算机网络第一章-概述" class="headerlink" title="计算机网络第一章 概述"></a>计算机网络第一章 概述</h2><h3 id="1-1-互联网概述及组成"><a href="#1-1-互联网概述及组成" class="headerlink" title="1.1 互联网概述及组成"></a>1.1 互联网概述及组成</h3><h4 id="互联网的两个重要基本特点"><a href="#互联网的两个重要基本特点" class="headerlink" title="互联网的两个重要基本特点"></a>互联网的两个重要基本特点</h4><ul><li>连通性：使上网用户之间都可以交换信息(数据，以及各种音频视频) ，好像这些用户的计算机都可以彼此直接连通一样。</li><li>共享：即资源共享</li></ul><p>​&#x3D;&#x3D;互连网&#x3D;&#x3D;是网络的网络，网络把许多计算机连接在一起，而互连网则把许多网络通过路由器连接在一起。与网络相连的计算机常称为主机（host）。</p><hr><h4 id="互联网基础结构发展的三个阶段"><a href="#互联网基础结构发展的三个阶段" class="headerlink" title="互联网基础结构发展的三个阶段"></a>互联网基础结构发展的三个阶段</h4><p>​一、单个网络ARPANET向互连网发展的过程</p><p>​<em>注意区分internet和Internet，以小写字母i开头的internet（互连网）是一个通用名词，它泛指由多个计算机网络互连而成的计算机网络；以大写字母I开头的Internet（互联网&#x2F;因特网）则是一个专用名词，它指当前全球最大的、开放的、由众多网络相互连接而成的特定互连网，它采用TCP&#x2F;IP协议族作为通信的规则</em></p><p>​二、建成了三级结构的互联网</p><p>​三、逐渐形成了多层次ISP结构的互联网，同时出现了新的名词概念：互联网服务提供者ISP（Internet Service Provider）。</p><hr><h4 id="互联网的组成"><a href="#互联网的组成" class="headerlink" title="互联网的组成"></a>互联网的组成</h4><p>​从互联网的工作方式上来看，可以划分为以下两大块：</p><h5 id="（1）边缘部分"><a href="#（1）边缘部分" class="headerlink" title="（1）边缘部分"></a>（1）边缘部分</h5><p>​由所有连接在互联网上的主机组成。这部分是用户直接使用的，用来进行通信（传送数据、音频或视频）和资源共享。</p><p>​在网络边缘的端系统之间的通信方式通常可以划分为两大类：客户-服务器方式（C&#x2F;S方式）和对等方式（P2P方式）。</p><ul><li>客户-服务器方式<br>客户是服务请求方，服务器是服务提供方。</li><li>对等连接方式</li></ul><h5 id="（2）核心部分"><a href="#（2）核心部分" class="headerlink" title="（2）核心部分"></a>（2）核心部分</h5><p>​由大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的（提供连通性和交换）。</p><hr><h4 id="端到端原则最大的特点是什么，为什么要这么做？"><a href="#端到端原则最大的特点是什么，为什么要这么做？" class="headerlink" title="端到端原则最大的特点是什么，为什么要这么做？"></a><strong>端到端原则最大的特点是什么，为什么要这么做？</strong></h4><ul><li>边缘智能，核心简单：端系统处理能力日益增强，用软件来增强网络协议的处理能力，性价比不断提高，降低网络的复杂性，等价于提升网络的传输速率，也等价于增强网络适应新兴应用的灵活性，降低网络的负担，使网络处理能力都用于交换分组。</li></ul><hr><h4 id="路由器之间采用分组交换的模式。"><a href="#路由器之间采用分组交换的模式。" class="headerlink" title="路由器之间采用分组交换的模式。"></a>路由器之间采用分组交换的模式。</h4><p><strong>分组交换工作要点：单个分组（整个报文一部分）传送到相邻结点，存储下来后查找转发表，转发到下一结点。</strong></p><ul><li><p>1、在发送端，先把较长报文划分成较短的、固定长度的数据段；</p></li><li><p>2、每个数据段前面添加首部构成分组；</p></li><li><p>3、以“分组”作为传送的数据单元，依次把各分组发送到接收端；</p></li><li><p>4、接收端把收到的数据恢复成原来的报文。</p></li><li><p>分组交换的优点：高效、灵活、迅速、可靠</p></li></ul><table><thead><tr><th>优点</th><th>所采用的手段</th></tr></thead><tbody><tr><td>高效</td><td>在分组传输的过程中<strong>动态分配传输带宽</strong>，对通信链路<strong>逐段占用</strong></td></tr><tr><td>灵活</td><td>为每一个分组<strong>独立地选择最合适的转发路由</strong></td></tr><tr><td>迅速</td><td>以分组作为传送单位，不先建立连接就能向其他主机发送分组</td></tr><tr><td>可靠</td><td>保证可靠性的网络协议；分布式多路由的分组交换网，使网络有很好的生存性</td></tr></tbody></table><hr><h4 id="电路交换、分组交换、报文交换的特点、方式、效率、对比"><a href="#电路交换、分组交换、报文交换的特点、方式、效率、对比" class="headerlink" title="电路交换、分组交换、报文交换的特点、方式、效率、对比"></a>电路交换、分组交换、报文交换的特点、方式、效率、对比</h4><table><thead><tr><th align="left">交换类型</th><th>特点</th></tr></thead><tbody><tr><td align="left">电路交换</td><td>整个报文的比特流连续地从源点直达终点，好像在一个管道中传送</td></tr><tr><td align="left">报文交换</td><td><strong>整个报文</strong>先传送到相邻节点，全部存储下来后查找转发表，转发到下一个节点</td></tr><tr><td align="left">分组交换</td><td>单个分组（这只是<strong>整个报文的一部分</strong>）传送到相邻节点，存储下来以后查找转发表，转发到下一个节点</td></tr></tbody></table><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/ff3fef0895864ca7bf51aae55fec685e.png" alt="在这里插入图片描述"></p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/3a6c213aa821400ca79aa9b61a3abfe7.png" alt="在这里插入图片描述"></p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/3abd2be003d048068a1c268fb521325d.png" alt="在这里插入图片描述"></p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/b98cc3ae3e934d6089453ea388aa154a.png" alt="在这里插入图片描述"></p><p><strong>总结</strong></p><ul><li>若要连续发送大量数据，且其传送时间远大于连接建立时间，则电路交换的传输速率较快。</li><li>报文交换和分组交换不需要预先分配传输带宽，在传送突发数据时可提高整个网络的信道利用率。</li><li>由于一个分组的长度往往远小于整个报文的长度，因此分组交换比报文交换的时延小，同时也具有更好的灵活性。</li><li>在过去很长的时期，人们都有这样的概念：电路交换适合于话音通信，而分组交换则适合于数据通信。然而随着蜂窝移动通信的发展，这种概念已经发生了根本的变化。从第四代蜂窝移动通信网开始，无论是话音通信还是数据通信，都要采用分组交换。</li></ul><hr><h3 id="1-2-计算机网络的类别、性能指标"><a href="#1-2-计算机网络的类别、性能指标" class="headerlink" title="1.2 计算机网络的类别、性能指标"></a>1.2 计算机网络的类别、性能指标</h3><h4 id="计算机网络的类别"><a href="#计算机网络的类别" class="headerlink" title="计算机网络的类别"></a>计算机网络的类别</h4><ul><li><strong>按照网络作用范围分类</strong><ul><li>广域网</li><li>城域网</li><li>局域网</li><li>个人区域网</li></ul></li><li><strong>按照拓扑结构</strong><ul><li><strong>总线型结构</strong> 优点：结构简单 ，缺点：单点故障可能会影响全网<img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/e80492ca511e436baedf47b33494b0d3.png" alt="img" style="zoom:50%;" /></li><li><strong>星型结构</strong> 优点：扩展方便 ，缺点：对中心节点的依赖较大<img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/1e1ae4975a444967b9971ba21c107462.png" alt="img" style="zoom:50%;" /></li><li><strong>树型结构</strong>  优点：扩展方便， 缺点：对非叶子节点的依赖大<img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/6bb26f8fc2f644aeaf12a2ff7634c108.png" alt="img" style="zoom:50%;" /></li><li><strong>环型结构</strong> 优点：结构简单，扩展方便，缺点：单点故障可能会影响全网<img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/8ba52fcbfd204e61b899b7af24e22998.png" style="zoom:50%;" /></li><li><strong>网状结构</strong> 优点：扩展方便 ， 缺点：冗余太多<img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/8eb53ab535fc4258b96bdce6e2d5b6d5.png" alt="img" style="zoom:50%;" /></li></ul></li></ul><h4 id="计算机网络的性能指标"><a href="#计算机网络的性能指标" class="headerlink" title="计算机网络的性能指标"></a>计算机网络的性能指标</h4><ol><li><p><strong>速率</strong></p><p>也称数据率或比特率，其中$4 \times 10^{10} bit&#x2F;s$的数据率就记为$40 Gbit&#x2F;s$。</p></li><li><p><strong>带宽</strong></p><p>在计算机网络中，带宽用来表示某通道在网络中传送数据的能力，也就是“最高数据率”。带宽的单位也就是数据率低单位$bit&#x2F;s$</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/9c547cba9e1d4fe398aad7b7e97815ba.png" alt="img"></p></li><li><p><strong>吞吐量</strong></p><p>表示在单位时间内通过某个网络（或信道、接口）的实际的数据量。（吞吐量≤带宽（网络额定速度））</p></li><li><p><strong>时延</strong></p><p>网络中的时延由以下几个不同的部分组成：</p><p>（1）发送时延（<del>传输时延</del>） $发送时延 &#x3D; \frac{数据帧长度(bit)}{发送速率(bit&#x2F;s)}$</p><p>（2）传播时延 $传播时延 &#x3D; \frac{信道长度(m)}{电磁波在信道上的传播速率(m&#x2F;s)}$</p><p>（3）处理时延 主机或路由器在收到分组后要话费一定的时间进行处理</p><p>（4）排队时延 分组进入路由器后要先在输入队列中排队等待处理</p><p>网速高指的是发送速率高而不是指传播速率高</p></li><li><p><strong>时延带宽积</strong></p><p>又称为以比特为单位的链路长度，$时延带宽积 &#x3D; 传播时延 \times 带宽$</p></li><li><p><strong>往返时间RTT</strong></p><p>即双向交互一次所需的时间</p></li><li><p><strong>利用率</strong></p><p>分为信道利用率和网络利用率。信道利用率并非越高越好。当网络的利用率接近最大值1时，网络的时延就趋于无穷大。</p><hr><p><strong>“在高速链路（或高带宽链路）上，比特会传送得更快些”（×）</strong></p></li></ol><p>​对于高速网络链路，我们提高的仅仅是数据的发送速率而不是比特在链路上的传播速率。提高链路带宽减小了数据的发送时延。 宽带链路和窄带链路上比特的传播速率是一样的。</p><hr><h3 id="1-3-计算机网络的体系结构"><a href="#1-3-计算机网络的体系结构" class="headerlink" title="1.3 计算机网络的体系结构"></a>1.3 计算机网络的体系结构</h3><h4 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h4><p>​开放系统互连基本参考模型OSI&#x2F;RM</p><hr><h4 id="网络协议三要素"><a href="#网络协议三要素" class="headerlink" title="网络协议三要素"></a><strong>网络协议三要素</strong></h4><ul><li>语法：数据与控制信息的结构或格式 。</li><li>语义：需要发出何种控制信息，完成何种动作以及做出何种响应。 </li><li>同步：事件实现顺序的详细说明。</li></ul><hr><h4 id="网络为什么要分层？"><a href="#网络为什么要分层？" class="headerlink" title="网络为什么要分层？"></a><strong>网络为什么要分层？</strong></h4><ul><li>解决网络的异构性、复杂性；</li><li>要实现互操作性，使用不同媒介连接起来的不同设备和网络系统在不同的应用环境下实现互操作性，并满足各种业务的需求。营造一种“生存空间”——任何厂商的任何产品、以及任何技术只要遵守这个空间的行为规则，就能够在其中生存并发展。</li><li>把复杂的网络互联问题划分为若干个较小的、单一的问题，在不同层上予以解决.</li><li>层次结构方法包括三个内容：分层及每层功能，服务与层间接口，协议。</li><li><strong>多层通信的实质</strong>：<ul><li>对等层实体之间虚拟通信;</li><li>下层向上层提供服务;</li><li>实际通信在最底层完成;</li></ul></li><li>好处： 各层之间是独立的;灵活性好;结构上可分割开;易于实现和维护;能促进标准化工作。</li></ul><hr><h4 id="三种分层结构体系"><a href="#三种分层结构体系" class="headerlink" title="三种分层结构体系"></a>三种分层结构体系</h4><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/a6364c11eb984d059ed975b7199fde7d.png" alt="在这里插入图片描述"></p><p>​OSI模型共七层协议体系结构，从上到下依次是：应用层，表示层，会话层，运输层，网络层，数据链路层，物理层</p><p>​TCP&#x2F;IP模型共四层协议体系结构，从上到下依次是：应用层，运输层，网际层，网络接口层</p><hr><h4 id="具有五层协议的体系结构"><a href="#具有五层协议的体系结构" class="headerlink" title="具有五层协议的体系结构"></a>具有五层协议的体系结构</h4><p><strong>协议数据单元PDU</strong></p><p>​OSI 参考模型把<strong>对等层次之间传送的数据单位</strong> 称为该层的 协议数据单元 PDU (Protocol Data Unit)。</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/6cd69a79412e409da8e371a08ace9fd8.png" alt="img"></p><ol><li><p>应用层</p><p>交互的数据单元称为&#x3D;&#x3D;报文&#x3D;&#x3D;</p></li><li><p>运输层</p><p>其数据传输的单位是&#x3D;&#x3D;用户数据报&#x3D;&#x3D;</p></li><li><p>网络层</p><p>传输的数据单元是&#x3D;&#x3D;分组&#x3D;&#x3D;，也称IP数据报</p><p>虚电路服务和数据报服务的区别<br>虚电路服务在传送数据之前，首先通过虚呼叫建立一条虚电路；所有分组沿同一条路径传送，并且按发出顺序到达，类似电路交换，建立连接后，分组中只需携带连接标识，建立连接时可协商参数、QoS、开销等<br>数据报：每个分组单独传送，网络为每个分组单独选路；路径可能不同；分组到达顺序可能与发出顺序不同；分组中需要携带完整的目的地址。</p></li><li><p>数据链路层</p><p>数据单位是&#x3D;&#x3D;帧&#x3D;&#x3D;</p><p>数据帧在链路上传输时有哪些出错情况，如何处理？&#x3D;&#x3D;出错重传，超时重传&#x3D;&#x3D;</p></li><li><p>物理层</p><p>数据单位是&#x3D;&#x3D;比特&#x3D;&#x3D;</p><p><strong>每层的任务</strong></p><table><thead><tr><th>层</th><th>作用</th></tr></thead><tbody><tr><td>应用层</td><td>通过应用进程间的交互来完成特定网络应用</td></tr><tr><td>运输层</td><td>负责向两台主机中进程之间的通信提供通用的数据传输服务</td></tr><tr><td>网络层</td><td>负责为分组交换网上的不同主机提供通信服务</td></tr><tr><td>数据链路层</td><td>在链路上无差错的传送帧</td></tr><tr><td>物理层</td><td>在物理媒体上透明地传输比特流(Bit)</td></tr></tbody></table></li></ol><hr><h4 id="虚电路服务和数据报服务的区别"><a href="#虚电路服务和数据报服务的区别" class="headerlink" title="虚电路服务和数据报服务的区别"></a><strong>虚电路服务和数据报服务的区别</strong></h4><ul><li>虚电路服务在传送数据之前，首先通过虚呼叫建立⼀条虚电路；所有分组沿同⼀条路径传送，并且按发出顺序到达，类似电路交换，建立连接后，分组中只需携带连接标识，建立连接时可协商参数、QoS、开销等</li><li>数据报：每个分组单独传送，网络为每个分组单独选路；路径可能不同；分组到达顺序可能与发出顺序不同；分组中需要携带完整的⽬的地址。</li></ul><hr><h4 id="协议与服务概念上的区别"><a href="#协议与服务概念上的区别" class="headerlink" title="协议与服务概念上的区别"></a>协议与服务概念上的区别</h4><ul><li>本层的服务用户 只能看见服务 而无法看见下面的 协议。即下面的协议对上面的服务用户是&#x3D;&#x3D;透明&#x3D;&#x3D;的。</li><li>协议是&#x3D;&#x3D;“水平的 ”&#x3D;&#x3D;，即协议是控制对等实体之间 通信的规则。</li><li>服务是&#x3D;&#x3D;“垂直的 ”&#x3D;&#x3D;，即服务是由下层向上层通过 层间接口提供的。</li><li>上层使用 服务原语 获得下层所提供的服务。</li></ul><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/a3cc6b9dea764ae38137d2f119b7bd7a.png" alt="img"></p><hr><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="计算模板"><a href="#计算模板" class="headerlink" title="计算模板"></a>计算模板</h4><p>​分清楚，k，M，G的底数是10还是2<br>​10的话，$10^3$,$10^6$,$10^9$（描述数据传输速率）<br>​2的话，$2^{10},2^{20},2^{30}$(描述数的计算，通常后面跟B，而1B&#x3D;8bit)</p><p>​在表示纯的数据的量的时候，以2为底数，10，20，30为指数<br>​在表示数据传输速率的时候，以10为底数，3，6，9为指数</p><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/29ea1669f6994c58867a4a3c653cfec3.png" alt="在这里插入图片描述"></p><p>​对于n个分组，m段链路<br>$$<br>总时延&#x3D;n个分组的发送时延+(m-1)\times1个分组的发送时延+m\times1段链路的传播时延<br>$$</p><h4 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h4><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/47178ab6ff5646ea9b70e3e56f7b5ae1.png" alt="img"></p><h4 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h4><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/8ab97ebd7de14d8d83efa322d2053e85.png" alt="img"></p><h4 id="例题3"><a href="#例题3" class="headerlink" title="例题3"></a>例题3</h4><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/3eea7bcbf0f44b4bb066ffa43345d73c.png" alt="img"></p><h4 id="例题4"><a href="#例题4" class="headerlink" title="例题4"></a>例题4</h4><p><img src="https://nuaapeter.oss-cn-nanjing.aliyuncs.com/81bdb0bbca0c4c05bfe157bf5c2a62ef.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>notes</tag>
      
      <tag>network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/26/hello-world/"/>
    <url>/2022/11/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
